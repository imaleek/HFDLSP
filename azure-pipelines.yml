# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
 branches:
   include:
     - main
     - dev
     - hotfix/*
 tags:
   include:
     - '*'

pr:
 branches:
  include:
    - main


variables:
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  - name: isDev
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/dev')]
  - name: isHotfix
    value: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix')]
  - name: isTag
    value: $[startsWith(variables['Build.SourceBranch'], 'refs/tags')]


name: $(date:yyMMdd)$(rev:.r)

jobs:
- job: Build
  displayName: Build Job
  pool:
    name: Default

  steps:
  
  - checkout: self
    clean: true
    fetchTags: true
    fetchDepth: 0
    path: '$(Build.DefinitionName)'
    
  - task: CmdLine@2
    inputs:
      script: |
        pip install --upgrade pip
        pip install flake8==6.0.0 unittest-xml-reporting
        pip install -r src/requirements.txt
      failOnStderr: true
    displayName: Install Requirements
  
  - task: CmdLine@2
    inputs:
      script: 'flake8 --ignore=E501,F401 src/.'
      failOnStderr: true
    displayName: Run Linter
  
  - task: CmdLine@2
    inputs:
      script: |
        python3 src/manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
    condition: succeededOrFailed()
    displayName: Run Test

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: "**/TEST-*.xml"
      testRunTitle: '$(Build.DefinitionName)'
    condition: succeededOrFailed()
    
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)'
      ArtifactName: '$(Build.DefinitionName)'
      publishLocation: 'Container'
    displayName: Publish $(Build.DefinitionName) artifact
    condition: or(eq(variables.isMain, true), eq(variables.isHotfix, true))

  - task: Docker@2
    inputs:
      containerRegistry: 'Trenches Docker Repo'
      repository: 'trenchesai/hfdlsp'
      command: 'buildAndPush'
      Dockerfile: 'src/Dockerfile'
      buildContext: 'src'
      tags: |
        $(Build.SourceBranchName)
        latest
    displayName: Build and Push Docker Image for $(Build.DefinitionName) tag $(Build.SourceBranchName)
    condition: eq(variables.isTag, true)
  - task: GenerateReleaseNotes@0
    inputs:
      FromBuildId: '1'
      ToBuildId: '$(Build.BuildId)'
      ReleaseNotesPath: 'GeneratedNotes'
      ReleaseNotesFile: 'ReleaseNotes.md'
      ShowOnlyChangeSet: true
      ShowOnlyWorkItems: true
      Test: false

  - task: GitHubRelease@1
    inputs:
      gitHubConnection: 'github.com_imaleek'
      repositoryName: '$(Build.Repository.Name)'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'userSpecifiedTag'
      tag: '$(Build.SourceBranchName)'
      title: 'Release $(Build.SourceBranchName)'
      releaseNotesFilePath: 'GeneratedNotes/ReleaseNotes.md'
      assets: '$(Build.SourcesDirectory)'
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'commitBased'
    condition: eq(variables.isTag, true)
    displayName: GitHub release $(Build.SourceBranchName) for $(Build.DefinitionName)

  - task: PublishPipelineMetadata@0