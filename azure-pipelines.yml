# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
 branches:
   include:
     - main
     - hotfix/*
 tags:
   include:
     - v*

pr:
 branches:
  include:
    - main


variables:
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/head/main')]
  - name: isHotfix
    value: $[startsWith(variables['Build.SourceBranch'], 'refs/head/hotfix')]


name: $(date:yyMMdd)$(rev:.r)

jobs:
- job: Build
  displayName: Build Job
  pool:
    name: Default

  steps:
  
  - checkout: self
    clean: true
    fetchTags: true
    fetchDepth: 0
    path: '$(Build.DefinitionName)'
    
  - task: CmdLine@2
    inputs:
      script: |
        pip install --upgrade pip
        pip install flake8==6.0.0 unittest-xml-reporting
        pip install -r src/requirements.txt
      failOnStderr: true
    displayName: Install Requirements
  
  - task: CmdLine@2
    inputs:
      script: 'flake8 --ignore=E501,F401 src/.'
      failOnStderr: true
    displayName: Run Linter
  
  - task: CmdLine@2
    inputs:
      script: |
        python3 src/manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
    condition: succeededOrFailed()
    displayName: Run Test

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: "**/TEST-*.xml"
      testRunTitle: '$(Build.DefinitionName)'
    condition: succeededOrFailed()
    
  - task: Docker@2
    inputs:
      containerRegistry: 'Trenches Docker Repo'
      repository: 'hfdlsp'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
      buildContext: 'src'
    condition: or(eq(variables.isMain, true), eq(variables.isHotfix, true)))

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)'
      ArtifactName: '$(Build.DefinitionName)'
      publishLocation: 'Container'
    displayName: Publish $(Build.DefinitionName) artifact
    condition: or(eq(variables.isMain, true), eq(variables.isHotfix, true)))



  - task: PublishPipelineMetadata@0